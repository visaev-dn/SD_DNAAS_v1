================================================================================
BRIDGE DOMAIN VALIDATOR & QA TOOL DATASHEET
================================================================================

Overview:
---------
This datasheet describes the usage and logic of the automated bridge domain validation tools for your network automation framework. These tools are designed to perform Quality Assurance (QA) on the bridge domain builder by simulating a variety of service requests and reporting on their success/failure, helping you catch topology or configuration issues early.

Scripts:
--------
1. **QA/bridge_domain_validator.py**
   - Runs N random bridge domain build requests between available leaves.
   - Tracks which succeed/fail, and generates a summary and detailed report.
   - Good for quick health checks and regression testing.

2. **QA/advanced_bridge_domain_tester.py**
   - Runs scenario-based and edge-case tests:
     - Random leaf pairs (configurable iterations)
     - Same-leaf (loopback) scenarios (configurable iterations)
     - Leaves affected by failed spines
     - Edge VLANs (1, 4094), long service names, special characters
     - Stress test (configurable iterations)
   - Produces a comprehensive report with scenario breakdowns.
   - Good for deep QA and pre-deployment validation.
   - **Iteration Options:**
     - `--random-iterations N` (default: 10)
     - `--same-leaf-iterations N` (default: 5)
     - `--stress-iterations N` (default: 20)
     - `--failed-spine-limit N` (default: 5)

How to Use:
-----------
**Option 1: Convenience Script (Recommended)**
The easiest way to run QA scripts with proper PYTHONPATH setup:

    ./run_qa.sh validator --iterations 20
    ./run_qa.sh advanced

**Option 2: Manual PYTHONPATH Setup**
Set your PYTHONPATH to the project root so the scripts can import the bridge domain builder:

    export PYTHONPATH=$(pwd)

**Run the basic validator:**

    python QA/bridge_domain_validator.py --iterations 20

- Results:
  - Console summary
  - `QA/bridge_domain_validation_report.txt` (detailed results)
  - `QA/bridge_domain_validation_results.json` (raw data)

**Run the advanced tester:**

    python QA/advanced_bridge_domain_tester.py

- Results:
  - Console summary
  - `QA/comprehensive_bridge_domain_test_report.txt` (detailed results)
  - `QA/comprehensive_bridge_domain_test_results.json` (raw data)

**Option 3: Virtual Environment Setup**
Use the provided activation script for virtual environment with PYTHONPATH:

    source activate_env.sh
    python QA/bridge_domain_validator.py --iterations 10

**Option 4: One-liner PYTHONPATH**
Run with PYTHONPATH set for just this command:

    PYTHONPATH=$(pwd) python QA/bridge_domain_validator.py --iterations 5

What the Scripts Do:
--------------------
- **Randomized Testing:**
  - Selects random pairs of available leaf devices and random interfaces.
  - Attempts to build a bridge domain (service) between them using the current topology.
  - Tracks which requests succeed/fail, and why.

- **Scenario/Edge-Case Testing (advanced):**
  - Tests same-leaf (loopback) scenarios.
  - Tries leaves affected by failed spines (should fail or be unavailable).
  - Tries edge VLANs, long names, special characters.
  - Runs a stress test with many rapid requests.

- **Reporting:**
  - Console output: summary of results, top failure reasons, path type breakdown.
  - Text report: detailed per-test results, device/interface success rates, failure analysis, scenario breakdowns.
  - JSON: all raw test data for further analysis.

How to Interpret Results:
-------------------------
- **Success Rate:**
  - Should be >90% for a healthy topology. Any failures should be investigated.
- **Failure Reasons:**
  - Common: "No configuration generated", "Could not find spine connection", etc.
  - Indicates missing topology data, misclassified devices, or config logic bugs.
- **Device/Interface Success Rates:**
  - Shows if certain leaves or interfaces are consistently problematic.
- **Path Analysis:**
  - 2-tier: direct leaf-spine-leaf
  - 3-tier: leaf-spine-superspine-spine-leaf

Best Practices:
---------------
- Run the validator after every topology discovery or major config change.
- Use the advanced tester before deployments or after major code refactors.
- Investigate any failed cases in the text report; check for patterns.
- Keep the JSON results for regression tracking or CI integration.
- Use the convenience script `./run_qa.sh` for consistent environment setup.

Troubleshooting:
----------------
- If you see import errors, ensure PYTHONPATH includes the project root.
- If a test fails, check the detailed report for the error and the involved devices.
- If you add new device types or naming conventions, update the bridge domain builder and topology discovery logic accordingly.
- Use `./run_qa.sh` to avoid PYTHONPATH issues - it automatically sets the correct path.

================================================================================ 